plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'ploceus' version '1.3-SNAPSHOT'
}

import groovy.json.JsonSlurper

base {
	archivesName = "${project.root_archives_base_name}"
}
version = "${project.root_version}"
group = "${project.root_maven_group}"

dependencies {
	// dummy mc dependency to keep loom happy
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.ornithemc:feather:${project.minecraft_version}+build.${project.feather_build}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
}

processResources {
	filesMatching('fabric.mod.json') {
		expand 'version': version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			pom.withXml {
				asNode().appendNode("dependencies")
			}
		}
	}
	repositories {
		def ENV = System.getenv()

		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL

				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		} else {
			mavenLocal()
		}
	}
}

def addPomDependency(project) {
	project.rootProject.publishing {
		publications {
			mavenJava(MavenPublication) {
				pom.withXml {
					def depsNode = asNode().get("dependencies")[0]
					def depNode = depsNode.appendNode("dependency")

					depNode.appendNode("groupId", project.group)
					depNode.appendNode("artifactId", project.name)
					depNode.appendNode("version", project.version)
					depNode.appendNode("scope", "compile")
				}
			}
		}
	}
}

def setUpLibrary(project) {
	project.apply plugin: 'java-library'
	project.apply plugin: 'eclipse'
	project.apply plugin: 'idea'

	project.base {
		archivesName = "${project.rootProject.archives_base_name}-${project.archives_base_name}"
	}
	project.version = "${project.version}"
	project.group = "${project.rootProject.root_maven_group}.${project.rootProject.maven_group}"

	project.repositories {
		// needed for loader in subprojects without a mc dep
		// since in those subprojects loom is not applied
		maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
		mavenCentral()
	}

	project.dependencies {
		implementation "net.fabricmc:fabric-loader:${project.rootProject.loader_version}"

		implementation project.project(':libraries:core')
	}

	addPomDependency(project)
}

def setUpModule(project, String... dependencies) {
	// normally modules have a 'root' and subprojects
	// for different mc version ranges
	// the Core API is the only exception to this
	def isCore = (project == project.project(':libraries:core'))

	project.apply plugin: 'java-library'
	project.apply plugin: 'eclipse'
	project.apply plugin: 'idea'
	project.apply plugin: 'maven-publish'
	project.apply plugin: 'fabric-loom'
	project.apply plugin: 'ploceus'

	if (isCore) {
		project.base {
			archivesName = "${project.rootProject.archives_base_name}-${project.archives_base_name}"
		}
		project.version = "${project.version}"
	} else {
		project.base {
			archivesName = "${project.rootProject.archives_base_name}-${project.parent.archives_base_name}"
		}
		def mc_version_range = "mc${project.min_mc_version}-mc${project.max_mc_version}"
		if ("*".equals(project.environment)) {
			project.version = "${project.parent.version}+${mc_version_range}"
		} else {
			project.version = "${project.parent.version}+${project.environment}-${mc_version_range}"
		}
	}
	project.group = "${project.rootProject.root_maven_group}.${project.rootProject.maven_group}"

	project.loom {
		if ("client".equals(project.environment)) {
			clientOnlyMinecraftJar()
		}
		if ("server".equals(project.environment)) {
			serverOnlyMinecraftJar()
		}
	}
	project.ploceus {
		if ("client".equals(project.environment)) {
			clientOnlyMappings()
		}
		if ("server".equals(project.environment)) {
			serverOnlyMappings()
		}
	}

	def libraries = getLibraryDependencies(project, dependencies)
	def modules = getModuleDependencies(project, dependencies)

	project.repositories {
		maven {
			name = 'Quilt'
			url = 'https://maven.quiltmc.org/repository/release'
		}
		mavenCentral()
	}

	project.dependencies {
		def mc_version = project.max_mc_version
		def sided_mc_version
		if ("*".equals(project.environment)) {
			sided_mc_version = mc_version
		} else {
			sided_mc_version = "${mc_version}-${project.environment}"
		}

		minecraft "com.mojang:minecraft:${mc_version}"
		if (project.hasProperty('nests_build')) {
			mappings project.loom.layered {
				mappings "net.ornithemc:feather:${sided_mc_version}+build.${project.feather_build}:v2"
				addLayer project.ploceus.nestedMappings()
			}
			nests "net.ornithemc:nests:${sided_mc_version}+build.${project.nests_build}"
		} else {
			mappings "net.ornithemc:feather:${sided_mc_version}+build.${project.feather_build}:v2"
		}
		modImplementation "net.fabricmc:fabric-loader:${project.rootProject.loader_version}"

		implementation "org.quiltmc.parsers:json:${project.rootProject.quilt_parsers_version}"
		if (isCore) {
			include "org.quiltmc.parsers:json:${project.rootProject.quilt_parsers_version}"
		}

		libraries.each { library ->
			implementation library
		}
		modules.each { module ->
			implementation module
		}
	}

	project.rootProject.dependencies {
		include project
	}

	project.sourceSets {
		main {
			java {
				if (!isCore) {
					srcDirs += project.parent.sourceSets.main.java.srcDirs
				}
			}
			resources {
				if (!isCore) {
					srcDirs += project.parent.sourceSets.main.resources.srcDirs
				}
			}
		}
	}

	project.processResources {
		filesMatching('fabric.mod.json') {
			expand project.properties
		}
	}

	project.tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.release = 8
	}

	project.java {
		// Still required by IDEs such as Eclipse and Visual Studio Code
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8

		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()

		// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
		// Uncomment this line to generate them.
		withJavadocJar()
	}

	project.jar {
		from(project.rootProject.file('LICENSE')) {
			rename { "${it}_${project.base.archivesName.get()}" }
		}
	}

	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				if (!isCore) {
					artifactId project.parent.name
				}

				artifact(project.remapJar) {
					builtBy project.remapJar
				}
				artifact(project.remapSourcesJar) {
					builtBy project.remapSourcesJar
				}
				artifact project.javadocJar
			}
		}
		repositories {
			def ENV = System.getenv()

			if (ENV.MAVEN_URL && shouldPublish(project, ENV.MAVEN_URL)) {
				maven {
					url ENV.MAVEN_URL

					credentials {
						username ENV.MAVEN_USERNAME
						password ENV.MAVEN_PASSWORD
					}
				}
			} else {
				mavenLocal()
			}
		}
	}

	if (isCore) {
		addPomDependency(project)
	}

	project.loom.disableDeprecatedPomGeneration(project.publishing.publications.mavenJava)
}

def getLibraryDependencies(project, String... moduleNames) {
	def libraries = new ArrayList<>()

	if (project != project.project(':libraries:core')) {
		libraries.add(project.parent)
	}

	for (moduleName : moduleNames) {
		def i = moduleName.indexOf('-mc')
		def libraryName = moduleName.substring(0, i)

		libraries.add(project.project(":libraries:${libraryName}"))
	}

	return libraries
}

def getModuleDependencies(project, String... moduleNames) {
	def modules = new ArrayList<>()

	if (project != project.project(':libraries:core')) {
		modules.add(project.project(':libraries:core'))
	}

	for (moduleName : moduleNames) {
		def i = moduleName.indexOf('-mc')
		def libraryName = moduleName.substring(0, i)

		modules.add(project.project(":libraries:${libraryName}:${moduleName}"))
	}

	return modules
}

def shouldPublish(project, mavenUrl) {
	def groupId = project.publishing.publications.mavenJava.groupId
	def artifactId = project.publishing.publications.mavenJava.artifactId
	def version = project.publishing.publications.mavenJava.version

	def exists = false

	try {
		def xml = new URL("${mavenUrl}/${groupId.replace('.', '/')}/${artifactId}/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)

		exists = metadata.versioning.versions.version.stream().filter({
			return it == version
		}).findFirst().isPresent()
	} catch (FileNotFoundException ignored) {
		// only happens if no publications exist yet
	}

	return !exists
}

allprojects {
	tasks.withType(GenerateModuleMetadata) {
		enabled = false
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.release = 8
	}
	
	java {
		// Still required by IDEs such as Eclipse and Visual Studio Code
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}
}