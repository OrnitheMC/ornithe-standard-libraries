plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'org.quiltmc.loom' version '1.2+' apply false
	id 'ploceus' version '1.2+' apply false
}

apply plugin: 'org.quiltmc.loom'
apply plugin: 'ploceus'

archivesBaseName = "${project.root_archives_base_name}"
version = "${project.version}"
group = "${project.maven_group}"

dependencies {
	// dummy mc dependency to keep loom happy
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.ornithemc:feather:${project.minecraft_version}+build.${project.feather_build}:v2"
	modImplementation "org.quiltmc:quilt-loader:${project.loader_version}"
}

jar {
	from('LICENSE') {
		rename { "${it}_${archivesBaseName}" }
	}
}

dependencies {
	subprojects.each {
		if (it.file('src/main/resources/quilt.mod.json').exists()) {
			include it
		}
	}
}

subprojects {
	def hasSource = project.file('src/main/java/').exists();
	def hasSourceParent = project.parent.file('src/main/java/').exists();
	def hasModJson = project.file('src/main/resources/quilt.mod.json').exists();
	def hasMcDep = project.hasProperty('min_mc_version') && project.hasProperty('max_mc_version')

	if (!hasSource && !hasModJson) {
		return;
	}

	apply plugin: 'java-library'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	if (hasMcDep) {
		apply plugin: 'org.quiltmc.loom'
		apply plugin: 'ploceus'
	}

	if (hasModJson) {
		archivesBaseName = "${rootProject.archives_base_name}-${project.parent.archives_base_name}"
		if (hasMcDep) {
			archivesBaseName += "-mc${project.min_mc_version}#${project.max_mc_version}"
		}
		version = "${project.parent.version}"
		group = "${rootProject.maven_group}.${project.parent.maven_group}"
	}

	repositories {
		// needed for quilt loader in subprojects without a mc dep
		// since in those subprojects loom is not applied
		maven {
			name = 'Quilt'
			url = 'https://maven.quiltmc.org/repository/release'
		}
		mavenCentral()
	}

	dependencies {
		if (hasMcDep) {
			minecraft "com.mojang:minecraft:${project.max_mc_version}"
			if (project.hasProperty('nests_build')) {
				mappings loom.layered {
					mappings "net.ornithemc:feather:${project.max_mc_version}+build.${project.feather_build}:v2"
					ploceus.nestedMappings(it)
				}
				nests "net.ornithemc:nests:${project.max_mc_version}+build.${project.nests_build}"
			} else {
				mappings "net.ornithemc:feather:${project.max_mc_version}+build.${project.feather_build}:v2"
			}
			modImplementation "org.quiltmc:quilt-loader:${rootProject.loader_version}"
		} else if (hasSource) {
			implementation "org.quiltmc:quilt-loader:${rootProject.loader_version}"
			implementation "org.quiltmc:quilt-json5:1.0.2"
		}

		if (project != project(':libraries:core')) {
			implementation project(':libraries:core')
			if (hasMcDep && hasSourceParent) {
				implementation project.parent
			}
		}
	}

	jar {
		from project.sourceSets.main.output
		if (hasMcDep && hasSourceParent) {
			from project.parent.sourceSets.main.output
		}
		from(rootProject.file('LICENSE')) {
			rename { "${it}_${archivesBaseName}" }
		}
	}
}

allprojects {
	def hasSource = project.file('src/main/java/').exists();
	def hasModJson = project.file('src/main/resources/quilt.mod.json').exists();

	if (!hasSource && !hasModJson) {
		return;
	}

	processResources {
		inputs.property 'version', version

		filesMatching('quilt.mod.json') {
			expand 'version': version
		}
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.release = 8
	}

	java {
		// Still required by IDEs such as Eclipse and Visual Studio Code
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8

		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()

		// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
		// Uncomment this line to generate them.
		withJavadocJar()
	}
}