plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'org.quiltmc.loom' version '1.2+'
	id 'ploceus' version '1.2+'
}

import groovy.json.JsonSlurper

archivesBaseName = "${project.root_archives_base_name}"
version = "${project.root_version}"
group = "${project.root_maven_group}"

dependencies {
	// dummy mc dependency to keep loom happy
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.ornithemc:feather:${project.minecraft_version}+build.${project.feather_build}:v2"
	modImplementation "org.quiltmc:quilt-loader:${project.loader_version}"
}

processResources {
	inputs.property 'version', version

	filesMatching('quilt.mod.json') {
		expand 'version': version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${archivesBaseName}" }
	}
}

def setUpLibrary(project) {
	project.apply plugin: 'java-library'
	project.apply plugin: 'eclipse'
	project.apply plugin: 'idea'

	project.repositories {
		// needed for quilt loader in subprojects without a mc dep
		// since in those subprojects loom is not applied
		maven {
			name = 'Quilt'
			url = 'https://maven.quiltmc.org/repository/release'
		}
		mavenCentral()
	}

	project.dependencies {
		implementation "org.quiltmc:quilt-loader:${rootProject.loader_version}"
		implementation "org.quiltmc:quilt-json5:1.0.2"

		implementation project.project(':libraries:core')
	}
}

def setUpModule(project, String... dependencies) {
	project.apply plugin: 'java-library'
	project.apply plugin: 'eclipse'
	project.apply plugin: 'idea'
	project.apply plugin: 'maven-publish'
	project.apply plugin: 'org.quiltmc.loom'
	project.apply plugin: 'ploceus'

	project.archivesBaseName = "${rootProject.archives_base_name}-${project.parent.archives_base_name}"
	project.version = "${project.parent.version}+mc${project.min_mc_version}#${project.max_mc_version}"
	project.group = "${rootProject.root_maven_group}.${rootProject.maven_group}"

	def libraries = getLibraryDependencies(project, dependencies)
	def modules = getModuleDependencies(project, dependencies)

	project.dependencies {
		minecraft "com.mojang:minecraft:${project.max_mc_version}"
		if (project.hasProperty('nests_build')) {
			mappings project.loom.layered {
				mappings "net.ornithemc:feather:${project.max_mc_version}+build.${project.feather_build}:v2"
				project.ploceus.nestedMappings(it)
			}
			nests "net.ornithemc:nests:${project.max_mc_version}+build.${project.nests_build}"
		} else {
			mappings "net.ornithemc:feather:${project.max_mc_version}+build.${project.feather_build}:v2"
		}
		modImplementation "org.quiltmc:quilt-loader:${rootProject.loader_version}"

		libraries.each { library ->
			implementation library
		}
		modules.each { module ->
			implementation module
		}
	}

	rootProject.dependencies {
		include project
	}

	project.processResources {
		inputs.property 'version', project.version

		filesMatching('quilt.mod.json') {
			expand 'version': project.version
		}
	}

	project.tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.release = 8
	}

	project.java {
		// Still required by IDEs such as Eclipse and Visual Studio Code
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8

		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()

		// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
		// Uncomment this line to generate them.
		withJavadocJar()
	}

	project.jar {
		from project.sourceSets.main.output
		if (project != project.project(':libraries:core')) {
			from project.parent.sourceSets.main.output
		}
		from(rootProject.file('LICENSE')) {
			rename { "${it}_${project.archivesBaseName}" }
		}
	}

	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact(project.remapJar) {
					builtBy project.remapJar
				}
				artifact(project.remapSourcesJar) {
					builtBy project.remapSourcesJar
				}
				artifact project.javadocJar
			}
		}
		repositories {
			def ENV = System.getenv()

			if (ENV.MAVEN_URL) {
				maven {
					url ENV.MAVEN_URL

					credentials {
						username ENV.MAVEN_USERNAME
						password ENV.MAVEN_PASSWORD
					}
				}
			} else {
				mavenLocal()
			}
		}
	}

	project.loom.disableDeprecatedPomGeneration(project.publishing.publications.mavenJava)
}

def getLibraryDependencies(project, String... moduleNames) {
	def libraries = new ArrayList<>()

	if (project != project.project(':libraries:core')) {
		libraries.add(project.parent)
	}

	for (moduleName : moduleNames) {
		def i = moduleName.indexOf('-mc')
		def libraryName = moduleName.substring(0, i)

		libraries.add(project.project(":libraries:${libraryName}"))
	}

	return libraries
}

def getModuleDependencies(project, String... moduleNames) {
	def modules = new ArrayList<>()

	if (project != project.project(':libraries:core')) {
		modules.add(project.project(':libraries:core'))
	}

	for (moduleName : moduleNames) {
		def i = moduleName.indexOf('-mc')
		def libraryName = moduleName.substring(0, i)

		modules.add(project.project(":libraries:${libraryName}:${moduleName}"))
	}

	return modules
}

allprojects {
	tasks.withType(GenerateModuleMetadata) {
		enabled = false
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.release = 8
	}
	
	java {
		// Still required by IDEs such as Eclipse and Visual Studio Code
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}
}